import boto3
import pandas as pd
import yaml
from helper.data_preparation import ModelDataPreparation
from urllib.parse import urlparse
import re

def main():
	"""

	This is the main function that performs the data preparation and derive revenue
	 generated by search keywords and search engine domain

	Parameters: Triggered as a first entry point when a file is ingested in S3 bucket
	-----------

	:return:Exists after transforming the data to build revenue generated per search keyword and engine.
	results are persisted in S3 bucket

	Notes:
	-----

	1. Read the config YAML file for inputs
	2. Instantiate the support classes that perform different activities including,
		- Data Ingestion into the pipeline
		- Data Preparation like Cleansing, validation and enrichment of data
		- Persisting the outputs
	3. Prepare the data before applying transformation logic
	4. Apply business logic
	5. Generated output and persist the data in S3 bucket
	6. Exit

	"""
	print("Welcome to Raj world")


	##Reac Config yaml
	with open('config.yml', 'r') as f:
		config = yaml.safe_load(f)
		f.close

	print(config)
	##Instantiate class objects
	dataPrep = ModelDataPreparation(config)

	## Data Preparation

	input_df = dataPrep.get_hitdata_set()
	input_df.head(5)
	bucket = 'adobe-hitdata'
	input_df['page_domain'] = input_df['page_url'].apply(lambda x: urlparse(x).netloc)

	input_df['search_domain'],input_df['search_query'], input_df['search_term'] =\
		zip(*input_df['referrer'].map(dataPrep.get_referrer_data))

	df_product_list_explode = input_df.assign(product_list=input_df['product_list'].str.split(',')).explode('product_list')
	df_product_list = df_product_list_explode['product_list'].str.split(';', expand=True)
	hit_enriched_data_df = pd.concat([df_product_list_explode, df_product_list], axis=1)
	dataPrep.cols_rename_format(hit_enriched_data_df)
	hit_enriched_data_df['partition_key'] = hit_enriched_data_df.groupby('ip')['hit_time_gmt'].rank(method='first', ascending=False)
	hit_enriched_data_df.sort_values(by=['ip', 'partition_key'], ascending=True).reset_index()
	status = dataPrep.write_dataframe(hit_enriched_data_df)
	print("Completed")

if __name__ == '__main__':
	main()